import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { Bot, Context, webhookCallback } from 'https://deno.land/x/grammy@v1.19.2/mod.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN') || '8071472545:AAEJ8YYW26LfJpJg_pcbXDCs9sJnAFiDYhk'
const WEBAPP_URL = 'https://knizhny-ostrov-rus.lovable.app'

const bot = new Bot(TELEGRAM_BOT_TOKEN)
const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function syncUser(ctx: Context) {
  if (!ctx.from) return
  
  const { data: syncResult, error: syncError } = await supabase.rpc('sync_telegram_data', {
    p_telegram_id: ctx.from.id,
    p_data: {
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
      username: ctx.from.username
    }
  })
  
  if (syncError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', syncError)
  } else {
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω:', syncResult)
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  await syncUser(ctx)
  
  await ctx.reply(
    `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BookCraft, ${ctx.from?.first_name}!\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\nüìö –ß–∏—Ç–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–∏–≥–∏\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏\nüìñ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:`,
    {
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å BookCraft',
            web_app: { url: `${WEBAPP_URL}/library` }
          }
        ]]
      }
    }
  )
})

// –ö–æ–º–∞–Ω–¥–∞ /mybooks
bot.command('mybooks', async (ctx) => {
  await syncUser(ctx)
  
  if (!ctx.from) return
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–Ω–∏–≥–∏
  const { data: user } = await supabase
    .from('users')
    .select('id')
    .eq('telegram_id', ctx.from.id)
    .single()
  
  if (!user) {
    await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return
  }
  
  const { data: books } = await supabase
    .from('books')
    .select('id, title, description')
    .eq('author_id', user.id)
    .limit(5)

  if (books && books.length > 0) {
    const buttons = books.map(book => ([{
      text: `üìñ ${book.title}`,
      web_app: { url: `${WEBAPP_URL}/read/${book.id}` }
    }]))
    
    buttons.push([{
      text: '‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É',
      web_app: { url: `${WEBAPP_URL}/create` }
    }])

    const responseText = 'üìö –í–∞—à–∏ –∫–Ω–∏–≥–∏:\n\n' + 
      books.map(book => `üìñ ${book.title}\n${book.description?.substring(0, 100)}...`).join('\n\n')
    
    await ctx.reply(responseText, {
      reply_markup: { inline_keyboard: buttons }
    })
  } else {
    await ctx.reply('üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.\n\n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:', {
      reply_markup: {
        inline_keyboard: [[
          {
            text: '‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É',
            web_app: { url: `${WEBAPP_URL}/create` }
          }
        ]]
      }
    })
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /popular
bot.command('popular', async (ctx) => {
  const { data: books } = await supabase
    .from('books')
    .select('id, title, description, stats')
    .eq('is_public', true)
    .eq('status', 'published')
    .order('created_at', { ascending: false })
    .limit(5)

  if (books && books.length > 0) {
    const buttons = books.map(book => ([{
      text: `üìñ ${book.title}`,
      web_app: { url: `${WEBAPP_URL}/read/${book.id}` }
    }]))

    buttons.push([{
      text: 'üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏',
      web_app: { url: `${WEBAPP_URL}/library` }
    }])

    const responseText = 'üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏:\n\n' + 
      books.map(book => 
        `üìñ ${book.title}\n${book.description?.substring(0, 100)}...\nüëÅÔ∏è ${book.stats?.views || 0} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`
      ).join('\n\n')
    
    await ctx.reply(responseText, {
      reply_markup: { inline_keyboard: buttons }
    })
  } else {
    await ctx.reply('üìö –ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥.\n\n–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º –∞–≤—Ç–æ—Ä–æ–º!', {
      reply_markup: {
        inline_keyboard: [[
          {
            text: '‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É',
            web_app: { url: `${WEBAPP_URL}/create` }
          }
        ]]
      }
    })
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /read —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
bot.hears(/^\/read (.+)/, async (ctx) => {
  const bookId = ctx.match[1]
  if (bookId) {
    await ctx.reply('üìñ –û—Ç–∫—Ä—ã–≤–∞—é –∫–Ω–∏–≥—É –¥–ª—è —á—Ç–µ–Ω–∏—è...', {
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üìñ –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É',
            web_app: { url: `${WEBAPP_URL}/read/${bookId}` }
          }
        ]]
      }
    })
  } else {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∫–Ω–∏–≥–∏: /read <book_id>')
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /setup - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Stars
bot.command('setup', async (ctx) => {
  if (ctx.from?.id !== 389694638) {
    await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
    return
  }

  try {
    const { data, error } = await supabase.functions.invoke('telegram-stars', {
      body: { action: 'setup_webhook' }
    })

    if (error) throw error

    if (data.success) {
      await ctx.reply(`‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\nURL: ${data.webhook_url}`)
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: ${data.description}`)
    }
  } catch (error: any) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /library - –æ—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤
bot.command('library', async (ctx) => {
  await ctx.reply('üìö –û—Ç–∫—Ä–æ–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤:', {
    reply_markup: {
      inline_keyboard: [[
        {
          text: 'üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤',
          web_app: { url: `${WEBAPP_URL}/torrent-library` }
        }
      ]]
    }
  })
})

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.on('message', async (ctx) => {
  if (ctx.message.text?.startsWith('/')) {
    await ctx.reply(
      `ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/mybooks - –ú–æ–∏ –∫–Ω–∏–≥–∏  
/popular - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏
/library - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ (Stars)
/read <book_id> - –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É
/setup - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:`,
      {
        reply_markup: {
        inline_keyboard: [[
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å BookCraft',
            web_app: { url: `${WEBAPP_URL}/library` }
          }
        ]]
        }
      }
    )
  }
})

// –°–æ–∑–¥–∞–µ–º webhook handler
const handleUpdate = webhookCallback(bot, 'std/http')

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    return await handleUpdate(req)
  } catch (error) {
    console.error('‚ùå Telegram bot error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})