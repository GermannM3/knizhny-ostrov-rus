import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

const TELEGRAM_BOT_TOKEN = '8071472545:AAEJ8YYW26LfJpJg_pcbXDCs9sJnAFiDYhk'
const WEBAPP_URL = 'https://hvzxsjoszgakugpstipe.supabase.co'

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const body = await req.json()
    console.log('üì® Telegram webhook:', JSON.stringify(body, null, 2))

    if (body.message) {
      const message = body.message
      const chatId = message.chat.id
      const text = message.text
      const user = message.from

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase.rpc('sync_telegram_data', {
        p_telegram_id: user.id,
        p_data: {
          first_name: user.first_name,
          last_name: user.last_name,
          username: user.username
        }
      })

      let responseText = ''
      let replyMarkup = null

      if (text === '/start') {
        responseText = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BookCraft, ${user.first_name}!\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\nüìö –ß–∏—Ç–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–∏–≥–∏\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏\nüìñ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:`
        
        replyMarkup = {
          inline_keyboard: [[
            {
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å BookCraft',
              web_app: { url: WEBAPP_URL }
            }
          ]]
        }
      } else if (text === '/mybooks') {
        // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: books } = await supabase
          .from('books')
          .select('id, title, description')
          .eq('author_id', (await supabase.from('users').select('id').eq('telegram_id', user.id).single()).data?.id)
          .limit(5)

        if (books && books.length > 0) {
          responseText = 'üìö –í–∞—à–∏ –∫–Ω–∏–≥–∏:\n\n'
          const buttons = books.map(book => ([{
            text: `üìñ ${book.title}`,
            web_app: { url: `${WEBAPP_URL}/read/${book.id}` }
          }]))
          
          buttons.push([{
            text: '‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É',
            web_app: { url: `${WEBAPP_URL}/create` }
          }])

          replyMarkup = { inline_keyboard: buttons }
          responseText += books.map(book => `üìñ ${book.title}\n${book.description?.substring(0, 100)}...`).join('\n\n')
        } else {
          responseText = 'üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.\n\n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:'
          replyMarkup = {
            inline_keyboard: [[
              {
                text: '‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É',
                web_app: { url: `${WEBAPP_URL}/create` }
              }
            ]]
          }
        }
      } else if (text === '/popular') {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏
        const { data: books } = await supabase
          .from('books')
          .select('id, title, description, stats')
          .eq('is_public', true)
          .eq('status', 'published')
          .order('created_at', { ascending: false })
          .limit(5)

        if (books && books.length > 0) {
          responseText = 'üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏:\n\n'
          const buttons = books.map(book => ([{
            text: `üìñ ${book.title}`,
            web_app: { url: `${WEBAPP_URL}/read/${book.id}` }
          }]))

          buttons.push([{
            text: 'üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏',
            web_app: { url: `${WEBAPP_URL}/library` }
          }])

          replyMarkup = { inline_keyboard: buttons }
          responseText += books.map(book => 
            `üìñ ${book.title}\n${book.description?.substring(0, 100)}...\nüëÅÔ∏è ${book.stats?.views || 0} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`
          ).join('\n\n')
        } else {
          responseText = 'üìö –ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥.\n\n–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º –∞–≤—Ç–æ—Ä–æ–º!'
          replyMarkup = {
            inline_keyboard: [[
              {
                text: '‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É',
                web_app: { url: `${WEBAPP_URL}/create` }
              }
            ]]
          }
        }
      } else if (text.startsWith('/read ')) {
        const bookId = text.split(' ')[1]
        if (bookId) {
          responseText = 'üìñ –û—Ç–∫—Ä—ã–≤–∞—é –∫–Ω–∏–≥—É –¥–ª—è —á—Ç–µ–Ω–∏—è...'
          replyMarkup = {
            inline_keyboard: [[
              {
                text: 'üìñ –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É',
                web_app: { url: `${WEBAPP_URL}/read/${bookId}` }
              }
            ]]
          }
        } else {
          responseText = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∫–Ω–∏–≥–∏: /read <book_id>'
        }
      } else {
        responseText = `ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/mybooks - –ú–æ–∏ –∫–Ω–∏–≥–∏  
/popular - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏
/read <book_id> - –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:`
        
        replyMarkup = {
          inline_keyboard: [[
            {
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å BookCraft',
              web_app: { url: WEBAPP_URL }
            }
          ]]
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      const telegramResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: responseText,
          reply_markup: replyMarkup,
          parse_mode: 'HTML'
        })
      })

      const result = await telegramResponse.json()
      console.log('üì§ Telegram response:', result)
    }

    return new Response(JSON.stringify({ ok: true }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
    
  } catch (error) {
    console.error('‚ùå Telegram bot error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})