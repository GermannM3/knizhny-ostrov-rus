
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { AuthProvider, useAuth } from "@/hooks/useAuth";
import { useTelegram } from "@/hooks/useTelegram";
import AuthPage from "./pages/AuthPage";
import LibraryPage from "./pages/LibraryPage";
import Dashboard from "./pages/Dashboard";
import CreateBook from "./pages/CreateBook";
import EditBook from "./pages/EditBook";
import EditChapter from "./pages/EditChapter";
import ReadBook from "./pages/ReadBook";
import FavoritesPage from "./pages/FavoritesPage";
import ProfilePage from "./pages/ProfilePage";
import FindBooksPage from "./pages/FindBooksPage";
import OtherAuthorsPage from "./pages/OtherAuthorsPage";
import PurchasedBooksPage from "./pages/PurchasedBooksPage";
import NotFound from "./pages/NotFound";
import DiagnosticPanel from "./components/DiagnosticPanel";
import { useEffect } from "react";

const queryClient = new QueryClient();

const ProtectedRoute = ({ children }: { children: React.ReactNode }) => {
  const { isAuthenticated } = useAuth();
  return isAuthenticated ? <>{children}</> : <Navigate to="/auth" />;
};

const PublicRoute = ({ children }: { children: React.ReactNode }) => {
  const { isAuthenticated } = useAuth();
  return !isAuthenticated ? <>{children}</> : <Navigate to="/library" />;
};

const TelegramWrapper = ({ children }: { children: React.ReactNode }) => {
  const tg = useTelegram();

  useEffect(() => {
    // –î–æ–±–∞–≤–ª—è–µ–º Telegram Web App —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!window.Telegram && !document.querySelector('script[src*="telegram-web-app.js"]')) {
      const script = document.createElement('script');
      script.src = 'https://telegram-web-app.js';
      script.async = true;
      document.head.appendChild(script);
      console.log('Telegram Web App —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
    }
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
  useEffect(() => {
    if (tg.isReady && tg.isTelegramApp && tg.telegramId && tg.user) {
      const initTelegramUser = async () => {
        try {
          console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram...');
          
          const { createOrGetUserByTelegramId, debugLogAllBooks, getPublicBooks } = await import('@/utils/storage');
          
          // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
          const user = createOrGetUserByTelegramId(tg.telegramId!, tg.user);
          console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', user.name, user.telegram_id);
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∫–Ω–∏–≥–∏
          const publicBooks = getPublicBooks();
          console.log('üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–Ω–∏–≥:', publicBooks.length);
          
          // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–Ω–∏–≥
          debugLogAllBooks();
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
          if (tg.cloudStorageReady) {
            console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
            
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const { fullSync } = await import('@/utils/telegramSync');
            const result = await fullSync(tg);
            
            if (result.success) {
              console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
              setTimeout(() => window.location.reload(), 1000);
            } else {
              console.log('‚ÑπÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
            }
          } else {
            console.log('‚ö†Ô∏è Cloud Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞');
          }
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
      };
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é
      const hasInitialized = sessionStorage.getItem('telegram_user_initialized');
      if (!hasInitialized) {
        sessionStorage.setItem('telegram_user_initialized', 'true');
        initTelegramUser();
      }
    }
  }, [tg.isReady, tg.isTelegramApp, tg.telegramId, tg.user, tg.cloudStorageReady]);

  // –†–µ–∂–∏–º –≥–æ—Å—Ç—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
  useEffect(() => {
    if (tg.isReady && !tg.isTelegramApp) {
      console.log('üåê –†–µ–∂–∏–º –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä–∞: –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∫–Ω–∏–≥–∏');
      
      const loadPublicBooks = async () => {
        try {
          const { getPublicBooks, debugLogAllBooks } = await import('@/utils/storage');
          const publicBooks = getPublicBooks();
          console.log('üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞:', publicBooks.length);
          debugLogAllBooks();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–Ω–∏–≥:', error);
        }
      };
      
      loadPublicBooks();
    }
  }, [tg.isReady, tg.isTelegramApp]);

  if (!tg.isReady) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="glass-card p-8 text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-400 mx-auto mb-4"></div>
          <p className="text-white">–ó–∞–≥—Ä—É–∑–∫–∞ BookCraft Russia...</p>
          {tg.isTelegramApp && (
            <div className="mt-2 space-y-1">
              <p className="text-gray-300 text-sm">
                –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
              </p>
              {tg.telegramId && (
                <p className="text-blue-400 text-xs">
                  Telegram ID: {tg.telegramId}
                </p>
              )}
            </div>
          )}
        </div>
      </div>
    );
  }

  return <>{children}</>;
};

const AppRoutes = () => {
  return (
    <Routes>
      <Route path="/auth" element={
        <PublicRoute>
          <AuthPage />
        </PublicRoute>
      } />
      <Route path="/library" element={<LibraryPage />} />
      <Route path="/find-books" element={<FindBooksPage />} />
      <Route path="/other-authors" element={<OtherAuthorsPage />} />
      <Route path="/purchased-books" element={
        <ProtectedRoute>
          <PurchasedBooksPage />
        </ProtectedRoute>
      } />
      <Route path="/dashboard" element={
        <ProtectedRoute>
          <Dashboard />
        </ProtectedRoute>
      } />
      <Route path="/create" element={
        <ProtectedRoute>
          <CreateBook />
        </ProtectedRoute>
      } />
      <Route path="/edit/:id" element={
        <ProtectedRoute>
          <EditBook />
        </ProtectedRoute>
      } />
      <Route path="/edit/:bookId/add-chapter" element={
        <ProtectedRoute>
          <EditChapter />
        </ProtectedRoute>
      } />
      <Route path="/edit/:bookId/chapter/:chapterId" element={
        <ProtectedRoute>
          <EditChapter />
        </ProtectedRoute>
      } />
      <Route path="/read/:id" element={<ReadBook />} />
      <Route path="/favorites" element={
        <ProtectedRoute>
          <FavoritesPage />
        </ProtectedRoute>
      } />
      <Route path="/profile" element={
        <ProtectedRoute>
          <ProfilePage />
        </ProtectedRoute>
      } />
      <Route path="/" element={<Navigate to="/library" />} />
      <Route path="*" element={<NotFound />} />
    </Routes>
  );
};

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <Toaster />
      <Sonner />
      <BrowserRouter>
        <TelegramWrapper>
          <AuthProvider>
            <AppRoutes />
            <DiagnosticPanel />
          </AuthProvider>
        </TelegramWrapper>
      </BrowserRouter>
    </TooltipProvider>
  </QueryClientProvider>
);

export default App;
