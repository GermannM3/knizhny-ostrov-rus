
import { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useAuth } from '@/hooks/useAuth';
import { useTelegram } from '@/hooks/useTelegram';
import { Button } from '@/components/ui/button';
import { Book, Heart, Plus, LogOut, Menu, X, BookOpen, User, RefreshCw } from 'lucide-react';
import { useTelegramSync } from '@/utils/telegramSync';
import { useToast } from '@/hooks/use-toast';

const Navigation = () => {
  const { user, logout } = useAuth();
  const { isTelegramApp, user: tgUser } = useTelegram();
  const { isReady: syncReady, sync, syncToCloud, loadFromCloud } = useTelegramSync();
  const { toast } = useToast();
  const location = useLocation();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [syncing, setSyncing] = useState(false);

  const navItems = [
    { path: '/library', label: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', icon: BookOpen },
    { path: '/find-books', label: '–ù–∞–π—Ç–∏ –∫–Ω–∏–≥–∏', icon: BookOpen },
    { path: '/purchased-books', label: '–ö—É–ø–ª–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏', icon: Heart },
    { path: '/dashboard', label: '–ú–æ–∏ –∫–Ω–∏–≥–∏', icon: Book },
    { path: '/create', label: '–°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É', icon: Plus },
    { path: '/favorites', label: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', icon: Heart },
    { path: '/profile', label: '–ü—Ä–æ—Ñ–∏–ª—å', icon: User },
  ];

  const isActive = (path: string) => location.pathname === path;

  const handleSync = async () => {
    if (syncing) return;
    
    setSyncing(true);
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
      
      if (isTelegramApp) {
        // –í Telegram WebApp: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        console.log('üì± Telegram WebApp: –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
        const result = await sync();
        
        if (result) {
          console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ Telegram WebApp —É—Å–ø–µ—à–Ω–∞');
          toast({
            title: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
            description: "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –æ–±–ª–∞–∫–æ–º",
          });
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          setTimeout(() => window.location.reload(), 500);
        } else {
          console.log('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ Telegram WebApp —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏');
          toast({
            title: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
            description: "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥–ª–∏ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è",
            variant: "destructive",
          });
        }
      } else {
        // –í –≤–µ–±-–≤–µ—Ä—Å–∏–∏: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–æ
        console.log('üåê –í–µ–±-–≤–µ—Ä—Å–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–æ');
        if (syncReady) {
          const result = await syncToCloud();
          
          if (result) {
            console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–æ —É—Å–ø–µ—à–Ω–∞');
            toast({
              title: "–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ–±–ª–∞–∫–æ",
              description: "–í–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Telegram",
            });
          } else {
            console.log('‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–æ —Å –æ—à–∏–±–∫–∞–º–∏');
            toast({
              title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
              description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–æ",
              variant: "destructive",
            });
          }
        } else {
          toast({
            title: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
            description: "Telegram Cloud Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            variant: "destructive",
          });
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
        variant: "destructive",
      });
    } finally {
      setSyncing(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å Telegram WebApp –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –≤–µ–±-–≤–µ—Ä—Å–∏—è —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ Cloud Storage
  const showSyncButton = isTelegramApp || syncReady;

  return (
    <nav className="glass-card m-4 p-4 sticky top-4 z-50">
      <div className="flex items-center justify-between">
        <Link to="/library" className="flex items-center space-x-2">
          <Book className="h-8 w-8 text-amber-400" />
          <div className="flex items-center">
            <span className="text-xl font-bold gradient-text">BookCraft</span>
            {isTelegramApp && (
              <span className="text-xs bg-blue-500 text-white px-2 py-1 rounded-full ml-2">
                Telegram
              </span>
            )}
          </div>
        </Link>

        {/* Desktop Navigation */}
        <div className="hidden md:flex items-center space-x-6">
          {navItems.map(({ path, label, icon: Icon }) => (
            <Link
              key={path}
              to={path}
              className={`flex items-center space-x-2 px-3 py-2 rounded-lg transition-all duration-200 ${
                isActive(path)
                  ? 'bg-amber-500/20 text-amber-400'
                  : 'text-gray-300 hover:text-amber-400 hover:bg-white/10'
              }`}
            >
              <Icon className="h-4 w-4" />
              <span>{label}</span>
            </Link>
          ))}
          
          {user && (
            <>
              <div className="flex items-center space-x-2 text-gray-300">
                <span>{user.name}</span>
                {isTelegramApp && tgUser && (
                  <span className="text-xs text-blue-400">(@{tgUser.username || tgUser.first_name})</span>
                )}
              </div>
              
              {showSyncButton && (
                <Button
                  onClick={handleSync}
                  disabled={syncing}
                  variant="outline"
                  size="sm"
                  className="text-green-400 border-green-500/50 hover:bg-green-500/20"
                  title={isTelegramApp ? "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –≤–µ–±-–≤–µ—Ä—Å–∏–µ–π" : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Telegram"}
                >
                  <RefreshCw className={`h-4 w-4 ${syncing ? 'animate-spin' : ''}`} />
                </Button>
              )}
              
              <Button 
                onClick={logout}
                variant="ghost" 
                size="sm"
                className="text-gray-300 hover:text-red-400"
                title="–í—ã—Ö–æ–¥"
              >
                <LogOut className="h-4 w-4" />
              </Button>
            </>
          )}
        </div>

        {/* Mobile Menu Button */}
        <Button
          onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
          variant="ghost"
          size="sm"
          className="md:hidden text-white"
        >
          {mobileMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
        </Button>
      </div>

      {/* Mobile Navigation */}
      {mobileMenuOpen && (
        <div className="md:hidden mt-4 space-y-2">
          {navItems.map(({ path, label, icon: Icon }) => (
            <Link
              key={path}
              to={path}
              onClick={() => setMobileMenuOpen(false)}
              className={`flex items-center space-x-2 px-3 py-2 rounded-lg transition-all duration-200 w-full ${
                isActive(path)
                  ? 'bg-amber-500/20 text-amber-400'
                  : 'text-gray-300 hover:text-amber-400 hover:bg-white/10'
              }`}
            >
              <Icon className="h-4 w-4" />
              <span>{label}</span>
            </Link>
          ))}
          
          {user && (
            <div className="flex items-center justify-between pt-2 border-t border-white/20">
              <div className="flex flex-col space-y-1 text-gray-300">
                <span>{user.name}</span>
                {isTelegramApp && tgUser && (
                  <span className="text-xs text-blue-400">(@{tgUser.username || tgUser.first_name})</span>
                )}
              </div>
              <div className="flex items-center space-x-2">
                {showSyncButton && (
                  <Button
                    onClick={handleSync}
                    disabled={syncing}
                    variant="outline"
                    size="sm"
                    className="text-green-400 border-green-500/50"
                    title={isTelegramApp ? "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å" : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram"}
                  >
                    <RefreshCw className={`h-4 w-4 ${syncing ? 'animate-spin' : ''}`} />
                  </Button>
                )}
                <Button 
                  onClick={() => {
                    logout();
                    setMobileMenuOpen(false);
                  }}
                  variant="ghost" 
                  size="sm"
                  className="text-gray-300 hover:text-red-400"
                  title="–í—ã—Ö–æ–¥"
                >
                  <LogOut className="h-4 w-4" />
                </Button>
              </div>
            </div>
          )}
        </div>
      )}
    </nav>
  );
};

export default Navigation;
