import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Star, Download, ExternalLink } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface TorrentBook {
  id: string;
  title: string;
  magnet_link: string;
  size?: string;
  seeds?: number;
  created_at: string;
}

interface TelegramStarsPaymentProps {
  book: TorrentBook;
  userId: number; // Telegram user ID
}

export default function TelegramStarsPayment({ book, userId }: TelegramStarsPaymentProps) {
  const [loading, setLoading] = useState(false);
  const [isOwned, setIsOwned] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    checkIfOwned();
  }, [book.id, userId]);

  const checkIfOwned = async () => {
    try {
      const { data, error } = await supabase.functions.invoke('telegram-stars', {
        body: {
          action: 'get_user_downloads',
          userId
        }
      });

      if (error) throw error;

      const owned = data.downloads?.some((download: any) => download.book_id === book.id);
      setIsOwned(owned);
    } catch (error) {
      console.error('Failed to check ownership:', error);
    }
  };

  const handlePurchase = async () => {
    if (!window.Telegram?.WebApp) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Telegram",
        variant: "destructive"
      });
      return;
    }

    setLoading(true);

    try {
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
      const { data, error } = await supabase.functions.invoke('telegram-stars', {
        body: {
          action: 'create_invoice',
          bookId: book.id,
          userId,
          starsAmount: 100
        }
      });

      if (error) throw error;

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ Telegram Web App
      (window.Telegram.WebApp as any).openInvoice(data.invoice_link, (status: string) => {
        setLoading(false);
        
        if (status === 'paid') {
          toast({
            title: "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!",
            description: "–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
          });
          setIsOwned(true);
        } else if (status === 'cancelled') {
          toast({
            title: "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            description: "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
            variant: "destructive"
          });
        } else {
          toast({
            title: "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã",
            description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            variant: "destructive"
          });
        }
      });

    } catch (error: any) {
      setLoading(false);
      console.error('Purchase error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂",
        variant: "destructive"
      });
    }
  };

  const handleDownload = () => {
    if (book.magnet_link) {
      window.open(book.magnet_link, '_blank');
      toast({
        title: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ",
        description: "Magnet-—Å—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ —Ç–æ—Ä—Ä–µ–Ω—Ç-–∫–ª–∏–µ–Ω—Ç–µ",
      });
    }
  };

  return (
    <Card className="w-full max-w-md">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <span>{book.title}</span>
          {isOwned && <Badge variant="secondary">–í —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏</Badge>}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          {book.size && (
            <div className="flex justify-between text-sm">
              <span className="text-muted-foreground">–†–∞–∑–º–µ—Ä:</span>
              <span>{book.size}</span>
            </div>
          )}
          {book.seeds !== undefined && (
            <div className="flex justify-between text-sm">
              <span className="text-muted-foreground">–°–∏–¥—ã:</span>
              <Badge variant={book.seeds > 10 ? "default" : "secondary"}>
                {book.seeds}
              </Badge>
            </div>
          )}
        </div>

        {isOwned ? (
          <Button 
            onClick={handleDownload}
            className="w-full"
            variant="default"
          >
            <Download className="h-4 w-4 mr-2" />
            –°–∫–∞—á–∞—Ç—å
          </Button>
        ) : (
          <Button 
            onClick={handlePurchase}
            disabled={loading}
            className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700"
          >
            <Star className="h-4 w-4 mr-2" />
            {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...' : '–ö—É–ø–∏—Ç—å –∑–∞ 100 ‚≠ê'}
          </Button>
        )}

        <div className="text-xs text-muted-foreground text-center">
          üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars
          <br />
          üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        </div>
      </CardContent>
    </Card>
  );
}