
import { useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { AlertTriangle, Search, Download, Upload, Trash2, RefreshCw } from 'lucide-react';
import { debugStorage, backupAllData, restoreFromBackup } from '@/utils/debug';
import { getBooks, getUsers, getChapters, clearAllData } from '@/utils/storage';
import { initializeTestData } from '@/utils/initData';

const DiagnosticPanel = () => {
  const { user } = useAuth();
  const [isOpen, setIsOpen] = useState(false);
  const [diagnosticResult, setDiagnosticResult] = useState<string>('');

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
  const isAdmin = user?.email === 'germannm@vk.com';
  
  if (!isAdmin) {
    return null;
  }

  const runDiagnostic = () => {
    console.clear();
    console.log('üîç –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò...');
    
    debugStorage();
    
    const books = getBooks();
    const users = getUsers();
    const chapters = getChapters();
    
    const result = `
üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
‚Ä¢ –ö–Ω–∏–≥ –≤ —Å–∏—Å—Ç–µ–º–µ: ${books.length}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}
‚Ä¢ –ì–ª–∞–≤: ${chapters.length}
‚Ä¢ –†–∞–∑–º–µ—Ä localStorage: ${Math.round(JSON.stringify(localStorage).length / 1024)} KB

üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12)
    `.trim();
    
    setDiagnosticResult(result);
    console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  };

  const restoreTestData = () => {
    if (confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–∏–≥–∏.')) {
      try {
        const result = initializeTestData();
        alert(`–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n\n–ê–¥–º–∏–Ω: ${result.adminUser.email}\n–ü–∞—Ä–æ–ª—å: Germ@nnM3\n–ö–Ω–∏–≥: ${result.books.length}`);
        window.location.reload();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
    }
  };

  const createBackup = () => {
    const backup = backupAllData();
    const dataStr = JSON.stringify(backup, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `bookcraft_backup_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    URL.revokeObjectURL(url);
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const backup = JSON.parse(e.target?.result as string);
        restoreFromBackup(backup);
        alert('–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      } catch (error) {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error);
      }
    };
    reader.readAsText(file);
  };

  if (!isOpen) {
    return (
      <Button
        onClick={() => setIsOpen(true)}
        variant="outline"
        size="sm"
        className="fixed bottom-4 right-4 bg-red-500 text-white border-red-600 hover:bg-red-600"
      >
        <AlertTriangle className="h-4 w-4 mr-2" />
        –ê–î–ú–ò–ù
      </Button>
    );
  }

  return (
    <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl bg-white">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-red-600">
            <AlertTriangle className="h-5 w-5" />
            –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
          </CardTitle>
          <CardDescription>
            –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <Button onClick={runDiagnostic} className="flex items-center gap-2">
              <Search className="h-4 w-4" />
              –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            </Button>
            
            <Button onClick={restoreTestData} className="flex items-center gap-2 bg-green-600 hover:bg-green-700">
              <RefreshCw className="h-4 w-4" />
              –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </Button>
            
            <Button onClick={createBackup} variant="outline" className="flex items-center gap-2">
              <Download className="h-4 w-4" />
              –°–∫–∞—á–∞—Ç—å –±—ç–∫–∞–ø
            </Button>
            
            <div>
              <input
                type="file"
                accept=".json"
                onChange={handleFileUpload}
                className="hidden"
                id="restore-file"
              />
              <Button 
                onClick={() => document.getElementById('restore-file')?.click()}
                variant="outline" 
                className="flex items-center gap-2 w-full"
              >
                <Upload className="h-4 w-4" />
                –ó–∞–≥—Ä—É–∑–∏—Ç—å –±—ç–∫–∞–ø
              </Button>
            </div>
            
            <Button 
              onClick={() => {
                if (confirm('–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ. –í—ã —É–≤–µ—Ä–µ–Ω—ã?')) {
                  clearAllData();
                  alert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
                }
              }}
              variant="destructive" 
              className="flex items-center gap-2 col-span-2"
            >
              <Trash2 className="h-4 w-4" />
              –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë
            </Button>
          </div>
          
          {diagnosticResult && (
            <div className="bg-gray-100 p-4 rounded-lg">
              <pre className="text-sm whitespace-pre-wrap">{diagnosticResult}</pre>
            </div>
          )}
          
          <div className="flex justify-end">
            <Button onClick={() => setIsOpen(false)} variant="outline">
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default DiagnosticPanel;
