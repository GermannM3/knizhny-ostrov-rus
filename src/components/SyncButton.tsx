
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Cloud, CloudOff, RefreshCw } from 'lucide-react';
import { useTelegramSync } from '@/utils/telegramSync';
import { toast } from '@/hooks/use-toast';

const SyncButton = () => {
  const [isLoading, setIsLoading] = useState(false);
  const telegramSync = useTelegramSync();

  const handleSync = async () => {
    if (!telegramSync.hasCloudStorage) {
      toast({
        title: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        description: "–¢—Ä–µ–±—É–µ—Ç—Å—è Telegram –≤–µ—Ä—Å–∏–∏ 6.1+ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      const result = await telegramSync.sync();
      
      if (result.success) {
        toast({
          title: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
          description: result.message,
        });
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        toast({
          title: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
          description: result.message,
          variant: result.hasCloudStorage ? "default" : "destructive",
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (!telegramSync.isTelegramApp) {
    return null; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ Telegram WebApp
  }

  return (
    <Button
      onClick={handleSync}
      disabled={isLoading}
      variant="outline"
      size="sm"
      className="border-white/20 text-white hover:bg-white/10"
    >
      {isLoading ? (
        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
      ) : telegramSync.hasCloudStorage ? (
        <Cloud className="h-4 w-4 mr-2" />
      ) : (
        <CloudOff className="h-4 w-4 mr-2" />
      )}
      {isLoading ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å'}
    </Button>
  );
};

export default SyncButton;
