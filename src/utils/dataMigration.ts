
import { 
  getBooks, 
  getUsers, 
  getChapters, 
  getPurchases, 
  getReadingProgress, 
  getFavorites,
  getCurrentUser 
} from './storage';
import {
  createSupabaseUser,
  createSupabaseBook,
  createSupabaseChapter,
  createSupabasePurchase,
  saveSupabaseReadingProgress,
  addSupabaseFavorite,
  getSupabaseUserByEmail,
  getSupabaseUserByTelegramId
} from './supabaseStorage';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage –≤ Supabase
export const migrateAllDataToSupabase = async () => {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const localBooks = getBooks();
    const localUsers = getUsers();
    const localChapters = getChapters();
    const localPurchases = getPurchases();
    const localReadingProgress = getReadingProgress();
    const localFavorites = getFavorites();

    console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:', {
      books: localBooks.length,
      users: localUsers.length,
      chapters: localChapters.length,
      purchases: localPurchases.length,
      readingProgress: localReadingProgress.length,
      favorites: localFavorites.length
    });

    // –ú–∞–ø–∞ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö ID —Å –Ω–æ–≤—ã–º–∏
    const userIdMap = new Map<string, string>();
    const bookIdMap = new Map<string, string>();

    // 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    for (const localUser of localUsers) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Supabase
        let existingUser = null;
        if (localUser.telegram_id) {
          existingUser = await getSupabaseUserByTelegramId(localUser.telegram_id);
        }
        if (!existingUser) {
          existingUser = await getSupabaseUserByEmail(localUser.email);
        }

        if (!existingUser) {
          const newUser = await createSupabaseUser({
            email: localUser.email,
            password: localUser.password,
            name: localUser.name,
            telegram_id: localUser.telegram_id
          });
          if (newUser) {
            userIdMap.set(localUser.id, newUser.id);
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${localUser.name} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
          }
        } else {
          userIdMap.set(localUser.id, existingUser.id);
          console.log(`üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${localUser.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${localUser.name}:`, error);
      }
    }

    // 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏
    console.log('üìö –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏...');
    for (const localBook of localBooks) {
      try {
        const newAuthorId = userIdMap.get(localBook.authorId);
        if (newAuthorId) {
          const newBook = await createSupabaseBook({
            title: localBook.title,
            description: localBook.description,
            genre: localBook.genre,
            coverImage: localBook.coverImage,
            authorId: newAuthorId,
            status: localBook.status,
            price: localBook.price || 0,
            views: localBook.views || 0,
            isFavorite: localBook.isFavorite || false,
            source: localBook.source || 'internal',
            format: localBook.format || 'bookcraft',
            is_public: localBook.is_public || false
          });
          if (newBook) {
            bookIdMap.set(localBook.id, newBook.id);
            console.log(`‚úÖ –ö–Ω–∏–≥–∞ "${localBook.title}" –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
          }
        } else {
          console.warn(`‚ö†Ô∏è –ê–≤—Ç–æ—Ä –¥–ª—è –∫–Ω–∏–≥–∏ "${localBook.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏ "${localBook.title}":`, error);
      }
    }

    // 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤—ã
    console.log('üìñ –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤—ã...');
    for (const localChapter of localChapters) {
      try {
        const newBookId = bookIdMap.get(localChapter.bookId);
        if (newBookId) {
          const newChapter = await createSupabaseChapter({
            bookId: newBookId,
            title: localChapter.title,
            content: localChapter.content,
            chapterNumber: localChapter.chapterNumber
          });
          if (newChapter) {
            console.log(`‚úÖ –ì–ª–∞–≤–∞ "${localChapter.title}" –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥–ª–∞–≤—ã "${localChapter.title}":`, error);
      }
    }

    // 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏
    console.log('üí∞ –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏...');
    for (const localPurchase of localPurchases) {
      try {
        const newUserId = userIdMap.get(localPurchase.userId);
        const newBookId = bookIdMap.get(localPurchase.bookId);
        if (newUserId && newBookId) {
          const newPurchase = await createSupabasePurchase({
            userId: newUserId,
            bookId: newBookId,
            paid: localPurchase.paid
          });
          if (newPurchase) {
            console.log(`‚úÖ –ü–æ–∫—É–ø–∫–∞ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏:`, error);
      }
    }

    // 5. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
    console.log('üìä –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è...');
    for (const localProgress of localReadingProgress) {
      try {
        const newUserId = userIdMap.get(localProgress.userId);
        const newBookId = bookIdMap.get(localProgress.bookId);
        if (newUserId && newBookId) {
          const newProgress = await saveSupabaseReadingProgress({
            userId: newUserId,
            bookId: newBookId,
            currentChapter: localProgress.currentChapter,
            totalChapters: localProgress.totalChapters,
            progress: localProgress.progress
          });
          if (newProgress) {
            console.log(`‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è:`, error);
      }
    }

    // 6. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    console.log('‚ù§Ô∏è –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...');
    for (const localFavorite of localFavorites) {
      try {
        const newUserId = userIdMap.get(localFavorite.userId);
        const newBookId = bookIdMap.get(localFavorite.bookId);
        if (newUserId && newBookId) {
          const newFavorite = await addSupabaseFavorite(newUserId, newBookId);
          if (newFavorite) {
            console.log(`‚úÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ`);
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:`, error);
      }
    }

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    return { success: true, userIdMap, bookIdMap };

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    return { success: false, error };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
export const checkMigrationNeeded = () => {
  const localBooks = getBooks();
  const localUsers = getUsers();
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ localStorage, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è
  return localBooks.length > 0 || localUsers.length > 0;
};
