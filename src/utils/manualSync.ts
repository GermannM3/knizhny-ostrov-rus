import { useTelegram } from '@/hooks/useTelegram';

// –ö–ª—é—á–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const SYNC_KEYS = [
  'bookplatform_users',
  'bookplatform_books', 
  'bookplatform_chapters',
  'bookplatform_current_user',
  'bookplatform_purchases',
  'bookplatform_reading_progress',
  'bookplatform_favorites'
];

// –¢–∏–ø—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
interface SyncResponse {
  success: boolean;
  message: string;
  data?: Record<string, string>;
  timestamp?: number;
}

// –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
export const manualLoadFromServer = async (telegramId: number): Promise<SyncResponse> => {
  try {
    console.log('üì• –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Telegram ID:', telegramId);
    
    const response = await fetch('/api/telegram-sync/load', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ telegram_id: telegramId }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result: SyncResponse = await response.json();
    
    if (result.success && result.data) {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      let updatedCount = 0;
      for (const [key, value] of Object.entries(result.data)) {
        const currentValue = localStorage.getItem(key);
        if (currentValue !== value) {
          localStorage.setItem(key, value);
          updatedCount++;
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫–ª—é—á: ${key}`);
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      localStorage.setItem('sync_timestamp', Date.now().toString());
      localStorage.setItem('sync_status', 'success');
      
      return {
        success: true,
        message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${updatedCount} –∫–ª—é—á–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞`,
        timestamp: Date.now()
      };
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
    localStorage.setItem('sync_status', 'error');
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ' + error
    };
  }
};

// –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
export const manualSaveToServer = async (telegramId: number): Promise<SyncResponse> => {
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram ID:', telegramId);
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const currentData: Record<string, string> = {};
    for (const key of SYNC_KEYS) {
      const value = localStorage.getItem(key);
      if (value) {
        currentData[key] = value;
      }
    }
    
    const response = await fetch('/api/telegram-sync/save', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        telegram_id: telegramId,
        data: currentData
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result: SyncResponse = await response.json();
    
    if (result.success) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      localStorage.setItem('sync_timestamp', Date.now().toString());
      localStorage.setItem('sync_status', 'success');
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
    localStorage.setItem('sync_status', 'error');
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ' + error
    };
  }
};

// –ü–æ–ª–Ω–∞—è —Ä—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
export const manualFullSync = async (telegramId: number): Promise<SyncResponse> => {
  try {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    const loadResult = await manualLoadFromServer(telegramId);
    
    // –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const saveResult = await manualSaveToServer(telegramId);
    
    const success = loadResult.success && saveResult.success;
    const message = success 
      ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
      : `–û—à–∏–±–∫–∏: ${!loadResult.success ? '–∑–∞–≥—Ä—É–∑–∫–∞' : ''} ${!saveResult.success ? '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ' : ''}`;
    
    return {
      success,
      message,
      timestamp: Date.now()
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ' + error
    };
  }
};

// –•—É–∫ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
export const useManualSync = () => {
  const { telegramId, isTelegramApp, cloudStorageReady } = useTelegram();
  
  return {
    // –§—É–Ω–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    loadFromServer: () => telegramId ? manualLoadFromServer(telegramId) : Promise.resolve({ success: false, message: 'Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω' }),
    saveToServer: () => telegramId ? manualSaveToServer(telegramId) : Promise.resolve({ success: false, message: 'Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω' }),
    fullSync: () => telegramId ? manualFullSync(telegramId) : Promise.resolve({ success: false, message: 'Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω' }),
    
    // –°—Ç–∞—Ç—É—Å—ã
    isReady: !!telegramId,
    isTelegramApp,
    hasCloudStorage: cloudStorageReady,
    needsManualSync: isTelegramApp && !cloudStorageReady,
    
    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    getLastSyncTime: () => {
      const timestamp = localStorage.getItem('sync_timestamp');
      return timestamp ? new Date(parseInt(timestamp)) : null;
    },
    getSyncStatus: () => localStorage.getItem('sync_status') || 'unknown'
  };
};