
import { useTelegram } from '@/hooks/useTelegram';

// –ö–ª—é—á–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const SYNC_KEYS = [
  'bookplatform_users',
  'bookplatform_books', 
  'bookplatform_chapters',
  'bookplatform_current_user',
  'bookplatform_purchases',
  'bookplatform_reading_progress',
  'bookplatform_favorites'
];

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–æ (–≤–µ–± -> –æ–±–ª–∞–∫–æ)
export const syncToCloud = async (tg: ReturnType<typeof useTelegram>): Promise<boolean> => {
  if (!tg.cloudStorageReady) {
    console.log('‚ùå –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ï–í–û–ó–ú–û–ñ–ù–ê: Cloud Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üì± –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram –≤–µ—Ä—Å–∏–∏ 6.9+ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    return false;
  }

  console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –æ–±–ª–∞–∫–æ...');
  let syncSuccess = true;
  let syncedCount = 0;

  try {
    for (const key of SYNC_KEYS) {
      try {
        const localData = localStorage.getItem(key);
        if (localData) {
          console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: ${key} (${Math.round(localData.length/1024)}KB)`);
          const success = await tg.setCloudData(key, localData);
          if (success) {
            syncedCount++;
            console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${key}`);
          } else {
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${key}`);
            syncSuccess = false;
          }
        } else {
          console.log(`‚ö™ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π –∫–ª—é—á: ${key}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${key}:`, error);
        syncSuccess = false;
      }
    }

    if (syncedCount > 0) {
      await updateSyncTime(tg);
      console.log(`üìä –û–¢–ü–†–ê–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: ${syncedCount}/${SYNC_KEYS.length} –∫–ª—é—á–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
    } else {
      console.log('‚ö†Ô∏è –ù–ï–¢ –î–ê–ù–ù–´–• –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò');
    }

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò:', error);
    syncSuccess = false;
  }

  return syncSuccess && syncedCount > 0;
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞ (–æ–±–ª–∞–∫–æ -> –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
export const loadFromCloud = async (tg: ReturnType<typeof useTelegram>): Promise<boolean> => {
  if (!tg.cloudStorageReady) {
    console.log('‚ùå –ó–ê–ì–†–£–ó–ö–ê –ù–ï–í–û–ó–ú–û–ñ–ù–ê: Cloud Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üì± –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram –≤–µ—Ä—Å–∏–∏ 6.9+ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    return false;
  }

  console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...');
  let loadSuccess = true;
  let loadedCount = 0;
  let foundDataCount = 0;

  for (const key of SYNC_KEYS) {
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è: ${key}`);
      const cloudData = await tg.getCloudData(key);
      if (cloudData) {
        foundDataCount++;
        const currentLocal = localStorage.getItem(key);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if (currentLocal !== cloudData) {
          localStorage.setItem(key, cloudData);
          loadedCount++;
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –æ–±–ª–∞–∫–∞: ${key} (${Math.round(cloudData.length/1024)}KB)`);
        } else {
          console.log(`‚ö™ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã: ${key}`);
        }
      } else {
        console.log(`üìã –í –æ–±–ª–∞–∫–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: ${key}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${key}:`, error);
      loadSuccess = false;
    }
  }

  console.log(`üìä –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê:`);
  console.log(`   üìÅ –ù–∞–π–¥–µ–Ω–æ –≤ –æ–±–ª–∞–∫–µ: ${foundDataCount}/${SYNC_KEYS.length} –∫–ª—é—á–µ–π`);
  console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: ${loadedCount} –∫–ª—é—á–µ–π`);
  
  return loadSuccess && foundDataCount > 0;
};

// –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è –≤–µ—Ä—Å–∏–π 6.9+
export const fullSync = async (tg: ReturnType<typeof useTelegram>): Promise<{ success: boolean, hasCloudStorage: boolean, message: string }> => {
  if (!tg.cloudStorageReady) {
    const message = 'Cloud Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram –≤–µ—Ä—Å–∏–∏ 6.9+';
    console.log('‚ùå –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ï–í–û–ó–ú–û–ñ–ù–ê:', message);
    return { success: false, hasCloudStorage: false, message };
  }

  console.log('üîÑ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¥–ª—è –≤–µ—Ä—Å–∏–∏ 6.9+...');
  
  try {
    // –î–ª—è –≤–µ—Ä—Å–∏–π 6.9+ –∏—Å–ø–æ–ª—å–∑—É–µ–º getItems –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É
    const loadResult = await loadFromCloudAdvanced(tg);
    
    // –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const syncResult = await syncToCloud(tg);
    
    const success = loadResult || syncResult;
    const message = success 
      ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' 
      : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    localStorage.setItem('sync_timestamp', Date.now().toString());
    localStorage.setItem('sync_status', success ? 'success' : 'no_changes');
    
    console.log('üèÅ –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:', message);
    return { success, hasCloudStorage: true, message };
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:', error);
    localStorage.setItem('sync_status', 'error');
    return { success: false, hasCloudStorage: true, message: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ' + error };
  }
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º getItems –¥–ª—è –≤–µ—Ä—Å–∏–π 6.9+
const loadFromCloudAdvanced = async (tg: ReturnType<typeof useTelegram>): Promise<boolean> => {
  if (!tg.cloudStorageReady || !tg.tg?.CloudStorage) {
    return false;
  }

  console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞ (–≤–µ—Ä—Å–∏—è 6.9+)...');
  
  return new Promise((resolve) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º getItems –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Å—Ä–∞–∑—É
      tg.tg!.CloudStorage!.getItems(SYNC_KEYS, (error, result) => {
        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–π:', error);
          resolve(false);
          return;
        }
        
        if (!result) {
          console.log('üìã –í –æ–±–ª–∞–∫–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
          resolve(false);
          return;
        }
        
        let loadedCount = 0;
        const foundDataCount = Object.keys(result).length;
        
        for (const [key, cloudData] of Object.entries(result)) {
          if (cloudData && SYNC_KEYS.includes(key)) {
            const currentLocal = localStorage.getItem(key);
            
            if (currentLocal !== cloudData) {
              localStorage.setItem(key, cloudData);
              loadedCount++;
              console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –æ–±–ª–∞–∫–∞: ${key} (${Math.round(cloudData.length/1024)}KB)`);
            } else {
              console.log(`‚ö™ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã: ${key}`);
            }
          }
        }
        
        console.log(`üìä –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê (–≤–µ—Ä—Å–∏—è 6.9+):`);
        console.log(`   üìÅ –ù–∞–π–¥–µ–Ω–æ –≤ –æ–±–ª–∞–∫–µ: ${foundDataCount}/${SYNC_KEYS.length} –∫–ª—é—á–µ–π`);
        console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: ${loadedCount} –∫–ª—é—á–µ–π`);
        
        resolve(foundDataCount > 0);
      });
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', error);
      resolve(false);
    }
  });
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
export const autoSyncItem = async (tg: ReturnType<typeof useTelegram>, key: string, value: string): Promise<void> => {
  if (!tg.cloudStorageReady || !SYNC_KEYS.includes(key)) {
    return;
  }
  
  console.log(`üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${key}`);
  
  try {
    const success = await tg.setCloudData(key, value);
    if (success) {
      console.log(`‚úÖ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${key}`);
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await tg.setCloudData('sync_timestamp', Date.now().toString());
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${key}`);
    }
  } catch (error) {
    console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${key}:`, error);
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const updateSyncTime = async (tg: ReturnType<typeof useTelegram>): Promise<void> => {
  try {
    await tg.setCloudData('sync_timestamp', Date.now().toString());
    console.log('üïê –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
  }
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
export const useTelegramSync = () => {
  const tg = useTelegram();
  
  return {
    // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    sync: () => fullSync(tg),
    // –¢–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∞
    loadFromCloud: () => loadFromCloud(tg),
    // –¢–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞
    syncToCloud: () => syncToCloud(tg),
    // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    autoSyncItem: (key: string, value: string) => autoSyncItem(tg, key, value),
    // –°—Ç–∞—Ç—É—Å—ã
    isReady: tg.cloudStorageReady,
    isTelegramApp: tg.isTelegramApp,
    hasCloudStorage: tg.cloudStorageReady
  };
};
