
import { useTelegram } from '@/hooks/useTelegram';

// –ö–ª—é—á–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const SYNC_KEYS = [
  'bookplatform_users',
  'bookplatform_books', 
  'bookplatform_chapters',
  'bookplatform_current_user',
  'bookplatform_purchases',
  'bookplatform_reading_progress',
  'bookplatform_favorites'
];

// –£–ª—É—á—à–µ–Ω–Ω—ã–π RPC-–ø–æ–¥–æ–±–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
export class TelegramRPCSync {
  private tg: ReturnType<typeof useTelegram>;
  
  constructor(telegramHook: ReturnType<typeof useTelegram>) {
    this.tg = telegramHook;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –≤ –æ–±–ª–∞–∫–æ (–≤–µ–±-–≤–µ—Ä—Å–∏—è -> –æ–±–ª–∞–∫–æ)
  async syncToCloud(): Promise<boolean> {
    if (!this.tg.cloudStorageReady) {
      console.log('‚ùå Telegram Cloud Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      return false;
    }

    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –≤ –æ–±–ª–∞–∫–æ...');
    let syncSuccess = true;

    try {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
      for (const key of SYNC_KEYS) {
        try {
          const localData = localStorage.getItem(key);
          if (localData) {
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±–ª–∞–∫–æ: ${key}`);
            await this.tg.setCloudData(key, localData);
          } else {
            console.log(`üìã –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞: ${key}`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª—é—á–∞ ${key}:`, error);
          syncSuccess = false;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if (syncSuccess) {
        await this.updateSyncTime();
        console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±–ª–∞–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.log('‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±–ª–∞–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
      }

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–±–ª–∞–∫–æ:', error);
      syncSuccess = false;
    }

    return syncSuccess;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞ –≤ localStorage (–æ–±–ª–∞–∫–æ -> Telegram WebApp)
  async loadFromCloud(): Promise<boolean> {
    if (!this.tg.cloudStorageReady) {
      console.log('‚ùå Telegram Cloud Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      return false;
    }

    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞ –≤ Telegram WebApp...');
    let loadSuccess = true;

    for (const key of SYNC_KEYS) {
      try {
        const cloudData = await this.tg.getCloudData(key);
        if (cloudData) {
          localStorage.setItem(key, cloudData);
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –æ–±–ª–∞–∫–∞: ${key}`);
        } else {
          console.log(`üìã –ù–µ—Ç –æ–±–ª–∞—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞: ${key}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞ ${key}:`, error);
        loadSuccess = false;
      }
    }

    return loadSuccess;
  }

  // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è Telegram WebApp (–∑–∞–≥—Ä—É–∑–∫–∞ + –æ—Ç–ø—Ä–∞–≤–∫–∞)
  async fullSync(): Promise<boolean> {
    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ Telegram WebApp...');
    
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
    const loadResult = await this.loadFromCloud();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±–ª–∞–∫–æ
    const syncResult = await this.syncToCloud();
    
    return loadResult && syncResult;
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private async getLastSyncTime(): Promise<number> {
    try {
      const syncTimeStr = await this.tg.getCloudData('sync_timestamp');
      return syncTimeStr ? parseInt(syncTimeStr) : 0;
    } catch {
      return 0;
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private async updateSyncTime(): Promise<void> {
    try {
      await this.tg.setCloudData('sync_timestamp', Date.now().toString());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
export const useTelegramSync = () => {
  const tg = useTelegram();
  const sync = new TelegramRPCSync(tg);
  
  return {
    // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–¥–ª—è Telegram WebApp)
    sync: () => sync.fullSync(),
    // –¢–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –æ–±–ª–∞–∫–∞
    loadFromCloud: () => sync.loadFromCloud(),
    // –¢–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±–ª–∞–∫–æ (–¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏)
    syncToCloud: () => sync.syncToCloud(),
    // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    isReady: tg.cloudStorageReady,
    // Telegram-—Ä–µ–∂–∏–º
    isTelegramApp: tg.isTelegramApp
  };
};
