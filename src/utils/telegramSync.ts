
import { useTelegram } from '@/hooks/useTelegram';

// –ö–ª—é—á–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const SYNC_KEYS = [
  'bookplatform_users',
  'bookplatform_books', 
  'bookplatform_chapters',
  'bookplatform_current_user'
];

// –ü—Ä–æ—Å—Ç–æ–π RPC-–ø–æ–¥–æ–±–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
export class TelegramRPCSync {
  private tg: ReturnType<typeof useTelegram>;
  
  constructor(telegramHook: ReturnType<typeof useTelegram>) {
    this.tg = telegramHook;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - Telegram –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É –≤–µ–±-–≤–µ—Ä—Å–∏–∏
  async syncFromMaster(): Promise<boolean> {
    if (!this.tg.cloudStorageReady || !this.tg.isTelegramApp) {
      console.log('Telegram —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return false;
    }

    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –º–∞—Å—Ç–µ—Ä-–≤–µ—Ä—Å–∏–∏...');
    let syncSuccess = true;

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π timestamp —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const lastSyncTime = await this.getLastSyncTime();
      console.log('–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:', new Date(lastSyncTime).toLocaleString());

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
      for (const key of SYNC_KEYS) {
        try {
          await this.syncSingleKey(key);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–∞ ${key}:`, error);
          syncSuccess = false;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if (syncSuccess) {
        await this.updateSyncTime();
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.log('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
      }

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      syncSuccess = false;
    }

    return syncSuccess;
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–¥–∏–Ω –∫–ª—é—á
  private async syncSingleKey(key: string): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage (–º–∞—Å—Ç–µ—Ä-–∏—Å—Ç–æ—á–Ω–∏–∫)
    const masterData = localStorage.getItem(key);
    
    if (!masterData) {
      console.log(`üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞ ${key} –≤ –º–∞—Å—Ç–µ—Ä-–≤–µ—Ä—Å–∏–∏`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram Cloud Storage
    const cloudData = await this.tg.getCloudData(key);

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞–∫–æ
    if (masterData !== cloudData) {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞: ${key}`);
      await this.tg.setCloudData(key, masterData);
    } else {
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞ ${key} —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`);
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞ –≤ localStorage (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–µ–∂–∏–º)
  async loadFromCloud(): Promise<boolean> {
    if (!this.tg.cloudStorageReady || !this.tg.isTelegramApp) {
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –æ–±–ª–∞–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return false;
    }

    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram Cloud Storage...');
    let loadSuccess = true;

    for (const key of SYNC_KEYS) {
      try {
        const cloudData = await this.tg.getCloudData(key);
        if (cloudData) {
          localStorage.setItem(key, cloudData);
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–ª—é—á: ${key}`);
        } else {
          console.log(`üìã –ù–µ—Ç –æ–±–ª–∞—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞: ${key}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞ ${key}:`, error);
        loadSuccess = false;
      }
    }

    return loadSuccess;
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private async getLastSyncTime(): Promise<number> {
    try {
      const syncTimeStr = await this.tg.getCloudData('sync_timestamp');
      return syncTimeStr ? parseInt(syncTimeStr) : 0;
    } catch {
      return 0;
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private async updateSyncTime(): Promise<void> {
    try {
      await this.tg.setCloudData('sync_timestamp', Date.now().toString());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –æ–±–ª–∞–∫–∞, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞–∫–æ
  async fullSync(): Promise<boolean> {
    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
    
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
    const loadResult = await this.loadFromCloud();
    
    // –ó–∞—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–æ
    const syncResult = await this.syncFromMaster();
    
    return loadResult && syncResult;
  }
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
export const useTelegramSync = () => {
  const tg = useTelegram();
  const sync = new TelegramRPCSync(tg);
  
  return {
    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    sync: () => sync.fullSync(),
    // –¢–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –æ–±–ª–∞–∫–∞
    loadFromCloud: () => sync.loadFromCloud(),
    // –¢–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±–ª–∞–∫–æ
    syncToCloud: () => sync.syncFromMaster(),
    // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    isReady: tg.cloudStorageReady && tg.isTelegramApp,
    // Telegram-—Ä–µ–∂–∏–º
    isTelegramApp: tg.isTelegramApp
  };
};
