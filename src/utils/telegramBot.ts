
const BOT_TOKEN = '8071472545:AAEJ8YYW26LfJpJg_pcbXDCs9sJnAFiDYhk';
const BOT_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;
const WEBAPP_URL = 'https://t.me/BookCraft_Russ_bot/BookCraftRussia';

interface TelegramMessage {
  message_id: number;
  from: {
    id: number;
    first_name: string;
    username?: string;
  };
  chat: {
    id: number;
    type: string;
  };
  text: string;
}

export class TelegramBot {
  static async sendMessage(chatId: number, text: string, replyMarkup?: any) {
    try {
      const response = await fetch(`${BOT_API_URL}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text,
          parse_mode: 'HTML',
          reply_markup: replyMarkup,
        }),
      });
      return await response.json();
    } catch (error) {
      console.error('Error sending message:', error);
      return null;
    }
  }

  static async handleStart(chatId: number, firstName: string) {
    const text = `
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BookCraft Russia, ${firstName}!</b>

üìö –°–æ–∑–¥–∞–≤–∞–π—Ç–µ, —á–∏—Ç–∞–π—Ç–µ –∏ –¥–µ–ª–∏—Ç–µ—Å—å –∫–Ω–∏–≥–∞–º–∏ —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤.

<b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>
‚Ä¢ üìñ /mybooks - –í–∞—à–∏ –∫–Ω–∏–≥–∏
‚Ä¢ üî• /popular - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏
‚Ä¢ üìö /read - –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –ø–æ ID
    `;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üåê –û—Ç–∫—Ä—ã—Ç—å BookCraft',
            web_app: { url: WEBAPP_URL }
          }
        ],
        [
          { text: 'üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏', callback_data: 'my_books' },
          { text: 'üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ', callback_data: 'popular_books' }
        ]
      ]
    };

    return this.sendMessage(chatId, text, keyboard);
  }

  static async handleMyBooks(chatId: number, telegramId: number) {
    const books = this.getUserBooks(telegramId);
    
    if (books.length === 0) {
      const text = `
üìù <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥</b>

–û—Ç–∫—Ä–æ–π—Ç–µ BookCraft WebApp, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É!
      `;
      
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É',
              web_app: { url: `${WEBAPP_URL}?page=create` }
            }
          ]
        ]
      };
      
      return this.sendMessage(chatId, text, keyboard);
    }

    let text = `üìö <b>–í–∞—à–∏ –∫–Ω–∏–≥–∏ (${books.length}):</b>\n\n`;
    const keyboard = { inline_keyboard: [] as any[] };

    books.slice(0, 5).forEach((book, index) => {
      text += `${index + 1}. <b>${book.title}</b>\n`;
      text += `   ${book.is_public ? 'üåê –ü—É–±–ª–∏—á–Ω–∞—è' : 'üîí –ß–µ—Ä–Ω–æ–≤–∏–∫'} ‚Ä¢ üëÅ ${book.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n`;
      
      keyboard.inline_keyboard.push([
        {
          text: `üìñ ${book.title}`,
          web_app: { url: `${WEBAPP_URL}?book=${book.id}` }
        }
      ]);
    });

    keyboard.inline_keyboard.push([
      {
        text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏',
        web_app: { url: `${WEBAPP_URL}?page=dashboard` }
      }
    ]);

    return this.sendMessage(chatId, text, keyboard);
  }

  static async handlePopular(chatId: number) {
    const books = this.getPopularBooks();
    
    if (books.length === 0) {
      return this.sendMessage(chatId, 'üìö <b>–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥</b>');
    }

    let text = `üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏:</b>\n\n`;
    const keyboard = { inline_keyboard: [] as any[] };

    books.slice(0, 5).forEach((book, index) => {
      text += `${index + 1}. <b>${book.title}</b>\n`;
      text += `   ‚úçÔ∏è ${book.author?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'} ‚Ä¢ üëÅ ${book.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n`;
      
      keyboard.inline_keyboard.push([
        {
          text: `üìñ ${book.title}`,
          web_app: { url: `${WEBAPP_URL}?book=${book.id}` }
        }
      ]);
    });

    keyboard.inline_keyboard.push([
      {
        text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É',
        web_app: { url: WEBAPP_URL }
      }
    ]);

    return this.sendMessage(chatId, text, keyboard);
  }

  static async handleRead(chatId: number, bookId: string) {
    const book = this.getBookById(bookId);
    
    if (!book) {
      return this.sendMessage(chatId, '‚ùå <b>–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>');
    }

    if (!book.is_public) {
      return this.sendMessage(chatId, 'üîí <b>–ö–Ω–∏–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è</b>');
    }

    const text = `
üìñ <b>${book.title}</b>

${book.description}

‚úçÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> ${book.author?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'}
üìÖ <b>–ñ–∞–Ω—Ä:</b> ${book.genre}
üëÅ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> ${book.views}
    `;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üìñ –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É',
            web_app: { url: `${WEBAPP_URL}?read=${book.id}` }
          }
        ]
      ]
    };

    return this.sendMessage(chatId, text, keyboard);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
  static getUserBooks(telegramId: number) {
    try {
      const books = JSON.parse(localStorage.getItem('bookplatform_books') || '[]');
      const users = JSON.parse(localStorage.getItem('bookplatform_users') || '[]');
      
      const user = users.find((u: any) => u.telegram_id === telegramId);
      if (!user) return [];
      
      return books.filter((book: any) => book.authorId === user.id);
    } catch {
      return [];
    }
  }

  static getPopularBooks() {
    try {
      const books = JSON.parse(localStorage.getItem('bookplatform_books') || '[]');
      const users = JSON.parse(localStorage.getItem('bookplatform_users') || '[]');
      
      return books
        .filter((book: any) => book.is_public)
        .map((book: any) => {
          const author = users.find((u: any) => u.id === book.authorId);
          return { ...book, author };
        })
        .sort((a: any, b: any) => (b.views || 0) - (a.views || 0));
    } catch {
      return [];
    }
  }

  static getBookById(bookId: string) {
    try {
      const books = JSON.parse(localStorage.getItem('bookplatform_books') || '[]');
      const users = JSON.parse(localStorage.getItem('bookplatform_users') || '[]');
      
      const book = books.find((b: any) => b.id === bookId);
      if (!book) return null;
      
      const author = users.find((u: any) => u.id === book.authorId);
      return { ...book, author };
    } catch {
      return null;
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  static async processMessage(message: TelegramMessage) {
    const { from, chat, text } = message;
    const chatId = chat.id;
    const telegramId = from.id;
    const firstName = from.first_name;

    console.log(`üì± Telegram Bot: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${firstName} (${telegramId}): ${text}`);

    if (text.startsWith('/start')) {
      return this.handleStart(chatId, firstName);
    }
    
    if (text === '/mybooks') {
      return this.handleMyBooks(chatId, telegramId);
    }
    
    if (text === '/popular') {
      return this.handlePopular(chatId);
    }
    
    if (text.startsWith('/read ')) {
      const bookId = text.replace('/read ', '').trim();
      return this.handleRead(chatId, bookId);
    }

    // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    return this.sendMessage(chatId, '‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–º–æ—â–∏.');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export const initTelegramBot = () => {
  console.log('ü§ñ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º:', BOT_TOKEN.substring(0, 10) + '...');
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å webhook setup –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  return {
    processMessage: TelegramBot.processMessage,
    sendMessage: TelegramBot.sendMessage
  };
};
